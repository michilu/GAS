// Generated by CoffeeScript 1.6.2

function NumberOfCharacters(text) {
  return text.length;
}
;
var forceStatusesUpdate, getData, statusesUpdate, toQueryString, tweetInitialize,
  __slice = [].slice;

tweetInitialize = function(consumerKey, consumerSecret) {
  var oAuthConfig;

  if (!consumerKey) {
    consumerKey = ScriptProperties.getProperty("twitterConsumerKey");
  }
  if (!consumerSecret) {
    consumerSecret = ScriptProperties.getProperty("twitterConsumerSecret");
  }
  oAuthConfig = UrlFetchApp.addOAuthService("twitter");
  oAuthConfig.setAccessTokenUrl("http://api.twitter.com/oauth/access_token");
  oAuthConfig.setRequestTokenUrl("http://api.twitter.com/oauth/request_token");
  oAuthConfig.setAuthorizationUrl("http://api.twitter.com/oauth/authorize");
  oAuthConfig.setConsumerKey(consumerKey);
  oAuthConfig.setConsumerSecret(consumerSecret);
};

statusesUpdate = function(info) {
  var options, queryStrings, result;

  options = {
    oAuthServiceName: "twitter",
    oAuthUseToken: "always",
    method: "POST"
  };
  queryStrings = toQueryString(info);
  result = UrlFetchApp.fetch("http://api.twitter.com/1.1/statuses/update.json?" + queryStrings, options);
  Logger.log(queryStrings);
  Logger.log(result.getResponseCode());
  Logger.log(Utilities.jsonParse(result.getContentText()));
};

toQueryString = function(info) {
  var key, queryStrings, value;

  queryStrings = (function() {
    var _results;

    _results = [];
    for (key in info) {
      value = info[key];
      _results.push("" + key + "=" + value);
    }
    return _results;
  })();
  return queryStrings.join("&");
};

getData = function() {
  var itemLength, key, random, result, rowNames, rows, sheetName, spreadsheetService, ss, _i, _len;

  sheetName = arguments[0], rowNames = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
  ss = SpreadsheetApp.getActiveSpreadsheet();
  spreadsheetService = new SpreadsheetService(ss.getId());
  spreadsheetService.init();
  itemLength = ss.getSheetByName(sheetName).getLastRow() - 1;
  random = Math.floor(Math.random() * itemLength) + 1;
  rows = spreadsheetService.query(sheetName, "no=" + random)[0];
  if (rowNames.length > 0) {
    result = {};
    for (_i = 0, _len = rowNames.length; _i < _len; _i++) {
      key = rowNames[_i];
      result[key] = encodeURIComponent(rows[key]);
    }
  } else {
    result = rows;
  }
  Logger.log(random);
  Logger.log(rows);
  return result;
};

forceStatusesUpdate = function() {
  var args, consumerKey, consumerSecret, data, error, i, _i, _len, _ref;

  consumerKey = arguments[0], consumerSecret = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
  tweetInitialize(consumerKey, consumerSecret);
  _ref = [0, 1, 2];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    i = _ref[_i];
    try {
      data = getData.apply(null, args);
      statusesUpdate(data);
      return;
    } catch (_error) {
      error = _error;
      Logger.log(args);
      Logger.log(data);
      Logger.log(error);
      if (i === 2) {
        throw error;
      }
    }
  }
};
